package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"strings"

	vaultapi "github.com/hashicorp/vault/api"
	"github.com/rs/zerolog/log"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/clientcmd"
	"k8s.io/client-go/tools/clientcmd/api"
)

const SaveKubeSecret = "kube-secret"

func saveKubeSecret(response *vaultapi.InitResponse) (string, error) {
	initJSON, err := json.Marshal(response)
	if err != nil {
		return "", err
	}

	// create kube api client and attempt to set namespace
	kube, err := newKubeClient(*flagKubeconfig)
	if err != nil {
		return "", err
	}
	ns := *flagKubeSecretNamespace
	if ns == "" {
		log.Info().Msg("reading namespace from serviceaccount token mount")
		nsBytes, err := ioutil.ReadFile("/var/run/secrets/kubernetes.io/serviceaccount/namespace")
		if err != nil {
			log.Warn().Err(err).Msg("unable to read namespace, falling back to default")
			ns = "default"
		}
		ns = string(nsBytes)
	}
	log.Info().Str("namespace", ns).Msg("using namespace")

	// to avoid losing vault init data: if secret with desired name already exists, use it as prefix for autogenerated secret name instead
	metadata := metav1.ObjectMeta{
		Labels:      *flagKubeSecretLabels,
		Annotations: *flagKubeSecretAnnotations,
	}
	existing, err := kube.CoreV1().Secrets(ns).Get(context.TODO(), *flagKubeSecretName, metav1.GetOptions{})
	if err != nil && !strings.Contains(err.Error(), "not found") || err == nil && existing.Name == *flagKubeSecretName {
		log.Warn().Err(err).Msg("using name prefix for kube secret")
		metadata.GenerateName = fmt.Sprintf("%s-", *flagKubeSecretName)
	} else {
		metadata.Name = *flagKubeSecretName
	}

	// create the secret
	secret, err := kube.CoreV1().Secrets(ns).Create(context.TODO(), &corev1.Secret{
		ObjectMeta: metadata,
		Data: map[string][]byte{
			"vault-init.json": initJSON,
			"root_token":      []byte(response.RootToken),
		},
	}, metav1.CreateOptions{})
	if err != nil {
		return "", err
	}

	return fmt.Sprintf("%s/%s", secret.Namespace, secret.Name), nil
}

// newKubeClient creates a Kubernetes API client from a kubeconfig file. If no file is passed, falls back to inClusterConfig.
func newKubeClient(kubeconfigPath string) (*kubernetes.Clientset, error) {
	if kubeconfigPath == "" {
		config, err := rest.InClusterConfig()
		if err != nil {
			return nil, err
		}
		clientset, err := kubernetes.NewForConfig(config)
		if err != nil {
			return nil, err
		}
		return clientset, nil
	} else {
		config, err := clientcmd.BuildConfigFromKubeconfigGetter("", func() (*api.Config, error) {
			return clientcmd.LoadFromFile(kubeconfigPath)
		})
		if err != nil {
			return nil, err
		}
		return kubernetes.NewForConfig(config)
	}
}
